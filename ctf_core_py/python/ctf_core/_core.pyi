# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from enum import Enum

class Action:
    def __new__(cls, id:builtins.int, velocity:tuple[builtins.float, builtins.float]) -> Action: ...
    def to_json(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class AgentState:
    r"""
    A snapshot of an agent's state in the game.
    """
    @property
    def name(self) -> builtins.str:
        r"""
        The human-readable name of the agent.
        """
    @property
    def id(self) -> builtins.int:
        r"""
        The unique identifier of the agent.
        """
    @property
    def team(self) -> Team:
        r"""
        The team the agent belongs to.
        """
    @property
    def max_speed(self) -> builtins.float:
        r"""
        The maximum speed of the agent.
        """
    @property
    def position(self) -> tuple[builtins.float, builtins.float]:
        r"""
        The position of the agent in the game world as an (x, y) tuple.
        """
    @property
    def has_flag(self) -> builtins.bool:
        r"""
        If this agent is currently carrying a flag.
        """

class CapturePointState:
    r"""
    A snapshot of an capture point's state in the game.
    """
    @property
    def name(self) -> builtins.str: ...
    @property
    def id(self) -> builtins.int:
        r"""
        The unique identifier of the capture point.
        """
    @property
    def team(self) -> Team:
        r"""
        The team the capture point belongs to.
        """
    @property
    def position(self) -> tuple[builtins.float, builtins.float]:
        r"""
        The position of the flag in the game world as an (x, y) tuple.
        """
    def has_flag(self) -> builtins.bool: ...

class Config:
    @property
    def red_team_agent_ids(self) -> builtins.list[builtins.str]: ...
    @red_team_agent_ids.setter
    def red_team_agent_ids(self, value: builtins.list[builtins.str]) -> None: ...
    @property
    def blue_team_agent_ids(self) -> builtins.list[builtins.str]: ...
    @blue_team_agent_ids.setter
    def blue_team_agent_ids(self, value: builtins.list[builtins.str]) -> None: ...
    @property
    def red_team_agent_positions(self) -> builtins.list[tuple[builtins.float, builtins.float]]: ...
    @red_team_agent_positions.setter
    def red_team_agent_positions(self, value: builtins.list[tuple[builtins.float, builtins.float]]) -> None: ...
    @property
    def blue_team_agent_positions(self) -> builtins.list[tuple[builtins.float, builtins.float]]: ...
    @blue_team_agent_positions.setter
    def blue_team_agent_positions(self, value: builtins.list[tuple[builtins.float, builtins.float]]) -> None: ...
    @property
    def red_team_flag_positions(self) -> builtins.list[tuple[builtins.float, builtins.float]]: ...
    @red_team_flag_positions.setter
    def red_team_flag_positions(self, value: builtins.list[tuple[builtins.float, builtins.float]]) -> None: ...
    @property
    def blue_team_flag_positions(self) -> builtins.list[tuple[builtins.float, builtins.float]]: ...
    @blue_team_flag_positions.setter
    def blue_team_flag_positions(self, value: builtins.list[tuple[builtins.float, builtins.float]]) -> None: ...
    @property
    def red_team_capture_point_positions(self) -> builtins.list[tuple[builtins.float, builtins.float]]: ...
    @red_team_capture_point_positions.setter
    def red_team_capture_point_positions(self, value: builtins.list[tuple[builtins.float, builtins.float]]) -> None: ...
    @property
    def blue_team_capture_point_positions(self) -> builtins.list[tuple[builtins.float, builtins.float]]: ...
    @blue_team_capture_point_positions.setter
    def blue_team_capture_point_positions(self, value: builtins.list[tuple[builtins.float, builtins.float]]) -> None: ...
    @property
    def debug(self) -> builtins.bool: ...
    @debug.setter
    def debug(self, value: builtins.bool) -> None: ...
    @property
    def python_exe(self) -> builtins.str: ...
    @python_exe.setter
    def python_exe(self, value: builtins.str) -> None: ...
    @property
    def rate_hz(self) -> typing.Optional[builtins.float]: ...
    @rate_hz.setter
    def rate_hz(self, value: typing.Optional[builtins.float]) -> None: ...
    def __new__(cls) -> Config: ...
    @staticmethod
    def from_json(json_str:builtins.str) -> Config: ...
    def __str__(self) -> builtins.str: ...

class DefenseBot:
    def __new__(cls, side:Team) -> DefenseBot: ...
    def startup(self, initial_state:GameState) -> None: ...
    def get_action(self, game_state:GameState, agent_state:AgentState) -> Action: ...

class FlagState:
    r"""
    A snapshot of an flags's state in the game.
    """
    @property
    def name(self) -> builtins.str:
        r"""
        The human-readable name of the flag.
        """
    @property
    def id(self) -> builtins.int:
        r"""
        The unique identifier of the flag.
        """
    @property
    def team(self) -> Team:
        r"""
        The team the flag belongs to.
        """
    @property
    def position(self) -> tuple[builtins.float, builtins.float]:
        r"""
        The position of the flag in the game world as an (x, y) tuple.
        """
    @property
    def status(self) -> FlagStatus: ...

class GameState:
    r"""
    A snapshot of the current game state, including scores and agent states for both teams.
    """
    @property
    def red_score(self) -> builtins.int:
        r"""
        The number of flags captured by the red team.
        """
    @property
    def blue_score(self) -> builtins.int:
        r"""
        The number of flags captured by the blue team.
        """
    @property
    def red_team(self) -> builtins.list[AgentState]:
        r"""
        The list of agents on the red team, sorted by their IDs.
        """
    @property
    def blue_team(self) -> builtins.list[AgentState]:
        r"""
        The list of agents on the blue team, sorted by their IDs.
        """
    @property
    def red_flags(self) -> builtins.list[FlagState]:
        r"""
        The list of flags belonging to the red team, sorted by their IDs.
        """
    @property
    def blue_flags(self) -> builtins.list[FlagState]:
        r"""
        The list of flags belonging to the blue team, sorted by their IDs.
        """
    @property
    def num_flags_per_team(self) -> builtins.int:
        r"""
        The number of flags each team starts with at the beginning of the game.
        """
    @property
    def red_capture_points(self) -> builtins.list[CapturePointState]:
        r"""
        The list of capture points belonging to the red team, sorted by their IDs.
        """
    @property
    def blue_capture_points(self) -> builtins.list[CapturePointState]:
        r"""
        The list of capture points belonging to the blue team, sorted by their IDs.
        """
    def get_team_score(self, team:Team) -> builtins.int:
        r"""
        Gets the score for the specified team.
        
        Parameters
           `team`: The team whose score to retrieve (either `Team.RED` or `Team.BLUE`).
        """
    def get_team_agents(self, team:Team) -> builtins.list[AgentState]:
        r"""
        Gets the list of agents for the specified team.
        
        Parameters
           `team`: The team whose agents to retrieve (either `Team.RED` or `Team.BLUE`).
        """
    def get_team_flags(self, team:Team) -> builtins.list[FlagState]:
        r"""
        Gets the list of flags for the specified team.
        
        Parameters
          `team`: The team whose flags to retrieve (either `Team.RED` or `Team.BLUE`).
        """
    def get_team_capture_points(self, team:Team) -> builtins.list[CapturePointState]:
        r"""
        Gets the list of capture points for the specified team.
        
        Parameters
         `team`: The team whose capture points to retrieve (either `Team.RED` or `Team.BLUE`).
        """
    @staticmethod
    def from_json(json_str:builtins.str) -> GameState: ...

class StateQueue:
    @property
    def rate_hz(self) -> builtins.float: ...
    def get(self, timeout_ms:typing.Optional[builtins.int]) -> typing.Optional[GameState]:
        r"""
        Wait for next GameState (timeout ms optional). Returns None on timeout.
        """
    def try_get(self) -> typing.Optional[GameState]:
        r"""
        Try to get without blocking.
        """
    def stop(self) -> None:
        r"""
        Ask the sim to stop.
        """
    def join(self) -> None:
        r"""
        Join the sim thread.
        """

class Team:
    RED: Team = ...
    BLUE: Team = ...
    def __eq__(self, other:builtins.object) -> builtins.bool: ...
    def other(self) -> Team: ...
    @staticmethod
    def from_str(s:builtins.str) -> Team: ...
    def __str__(self) -> builtins.str: ...

class FlagStatus(Enum):
    Captured = ...
    PickedUp = ...
    Dropped = ...

def run(config:Config) -> None:
    r"""
    Runs the Capture the Flag simulation with the given policies for each team.
    """

def run_headless(config:Config) -> StateQueue: ...

def segment_is_free(start:tuple[builtins.float, builtins.float], end:tuple[builtins.float, builtins.float], side:Team, timeout_ms:typing.Optional[builtins.int]=None) -> builtins.bool:
    r"""
    Checks if the line segment from `start` to `end` is free of obstacles by
    making a blocking RPC to the Bevy app's physics server.
    
    Parameters:
      - `start`: Tuple of (x, y) coordinates for the start of the segment.
      - `end`: Tuple of (x, y) coordinates for the end of the segment.
      - `side`: Team ID (Team.RED or Team.BLUE)
      - `timeout_ms`: Timeout in milliseconds for the RPC call (default: 100ms).
    
    Returns:
     - `True` if the segment is free of obstacles, `False` otherwise. This does not include other agents
    """

